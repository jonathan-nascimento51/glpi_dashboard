name: CI Pipeline - Robust Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend

jobs:
  # Frontend Gates: Lint + Types + Unit Tests + Orval Drift + Storybook
  frontend-lint:
    name: Frontend Lint & Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci

    - name: Run ESLint
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run lint

    - name: Run Prettier check
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run format:check

  frontend-types:
    name: Frontend Type Check
    runs-on: ubuntu-latest
    needs: [frontend-lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci

    - name: Run TypeScript check
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run type-check

  frontend-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: [frontend-types]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci

    - name: Run frontend tests with coverage
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run test:ci

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ env.FRONTEND_DIR }}/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Orval Drift Check - Critical Gate
  orval-drift-check:
    name: Orval API Drift Check
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci

    - name: Generate API types with Orval
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run gen:api

    - name: Check for API drift
      run: |
        cd ${{ env.FRONTEND_DIR }}
        if ! git diff --exit-code src/api/; then
          echo " API drift detected! Generated types don't match committed files."
          echo "Please run 'npm run gen:api' and commit the changes."
          git diff src/api/
          exit 1
        else
          echo " No API drift detected. Generated types are in sync."
        fi

  # Storybook Build - Visual Components Gate
  storybook-build:
    name: Storybook Build
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci

    - name: Build Storybook
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run build-storybook

    - name: Upload Storybook build
      uses: actions/upload-artifact@v3
      with:
        name: storybook-build
        path: ${{ env.FRONTEND_DIR }}/storybook-static/
        retention-days: 7

  # Backend Gates: Lint + Types + Unit Tests
  backend-lint:
    name: Backend Lint & Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ${{ env.BACKEND_DIR }}/requirements.txt ]; then pip install -r ${{ env.BACKEND_DIR }}/requirements.txt; fi

    - name: Run flake8 (Linting)
      run: |
        flake8 ${{ env.BACKEND_DIR }}/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ${{ env.BACKEND_DIR }}/ --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff ${{ env.BACKEND_DIR }}/

    - name: Run black (Code Formatting)
      run: |
        black --check --diff ${{ env.BACKEND_DIR }}/

    - name: Run mypy (Type Checking)
      run: |
        mypy ${{ env.BACKEND_DIR }}/ --ignore-missing-imports || true

  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: [backend-lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ${{ env.BACKEND_DIR }}/requirements.txt ]; then pip install -r ${{ env.BACKEND_DIR }}/requirements.txt; fi

    - name: Run pytest with coverage
      run: |
        cd ${{ env.BACKEND_DIR }}
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ env.BACKEND_DIR }}/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Schemathesis - API Fuzzing Gate
  schemathesis-fuzz:
    name: API Fuzzing with Schemathesis
    runs-on: ubuntu-latest
    needs: [backend-tests]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install schemathesis
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ${{ env.BACKEND_DIR }}/requirements.txt ]; then pip install -r ${{ env.BACKEND_DIR }}/requirements.txt; fi

    - name: Start backend server
      run: |
        cd ${{ env.BACKEND_DIR }}
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        REDIS_URL: redis://localhost:6379
        GLPI_API_URL: ${{ secrets.GLPI_API_URL || 'http://localhost:8080' }}
        GLPI_APP_TOKEN: ${{ secrets.GLPI_APP_TOKEN || 'test_app_token' }}
        GLPI_USER_TOKEN: ${{ secrets.GLPI_USER_TOKEN || 'test_user_token' }}

    - name: Run Schemathesis fuzzing
      run: |
        schemathesis run http://localhost:8000/openapi.json \
          --checks all \
          --max-examples 50 \
          --hypothesis-max-examples 10 \
          --hypothesis-deadline 5000 \
          --report
      continue-on-error: true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, orval-drift-check]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ${{ env.BACKEND_DIR }}/requirements.txt ]; then pip install -r ${{ env.BACKEND_DIR }}/requirements.txt; fi
        cd ${{ env.FRONTEND_DIR }} && npm ci

    - name: Build frontend
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run build

    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379
        GLPI_API_URL: ${{ secrets.GLPI_API_URL || 'http://localhost:8080' }}
        GLPI_APP_TOKEN: ${{ secrets.GLPI_APP_TOKEN || 'test_app_token' }}
        GLPI_USER_TOKEN: ${{ secrets.GLPI_USER_TOKEN || 'test_user_token' }}
      run: |
        cd ${{ env.BACKEND_DIR }}
        pytest tests/integration/ -v

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r ${{ env.BACKEND_DIR }}/ -f json -o bandit-report.json || true
        bandit -r ${{ env.BACKEND_DIR }}/ -ll

    - name: Run Safety check
      run: |
        if [ -f requirements.txt ]; then safety check -r requirements.txt; fi
        if [ -f ${{ env.BACKEND_DIR }}/requirements.txt ]; then safety check -r ${{ env.BACKEND_DIR }}/requirements.txt; fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json

  # Final Gate - All must pass
  all-gates-passed:
    name: All Gates Passed 
    runs-on: ubuntu-latest
    needs: [
      frontend-lint,
      frontend-types, 
      frontend-tests,
      orval-drift-check,
      storybook-build,
      backend-lint,
      backend-tests,
      schemathesis-fuzz,
      integration-tests,
      security-scan
    ]
    steps:
    - name: All gates passed
      run: |
        echo " All CI gates have passed successfully!"
        echo " Frontend: Lint, Types, Unit Tests"
        echo " Backend: Lint, Types, Unit Tests"
        echo " Orval: API drift check"
        echo " Schemathesis: API fuzzing"
        echo " Storybook: Visual components build"
        echo " Integration: End-to-end tests"
        echo " Security: Vulnerability scanning"

  # Build and Deploy (only on main branch)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [all-gates-passed]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ${{ env.BACKEND_DIR }}/requirements.txt ]; then pip install -r ${{ env.BACKEND_DIR }}/requirements.txt; fi
        cd ${{ env.FRONTEND_DIR }} && npm ci

    - name: Build frontend for production
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run build

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r ${{ env.BACKEND_DIR }}/ deploy/
        cp -r ${{ env.FRONTEND_DIR }}/dist/ deploy/frontend/
        cp requirements.txt deploy/ 2>/dev/null || true
        cp ${{ env.BACKEND_DIR }}/requirements.txt deploy/ 2>/dev/null || true

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deploy/
        retention-days: 30
