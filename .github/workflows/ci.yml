name: CI Pipeline - Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

jobs:
  # ========================================
  # QUALITY GATE A: Backend Validation
  # ========================================
  backend-quality-gate:
    name: " Backend Quality Gate"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ''3.12''

    - name: Install backend dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: "🔍 Code Quality - Ruff Linting"
      working-directory: ${{ env.BACKEND_DIR }}
      run: ruff check . --output-format=github

    - name: " Code Quality - Ruff Formatting"
      working-directory: ${{ env.BACKEND_DIR }}
      run: ruff format --check .

    - name: "🔍 Type Checking - MyPy"
      working-directory: ${{ env.BACKEND_DIR }}
      run: mypy .

    - name: " Security - Bandit"
      working-directory: ${{ env.BACKEND_DIR }}
      run: bandit -r . -f json -o bandit-report.json || true

    - name: "🛡️ Security - Safety"
      working-directory: ${{ env.BACKEND_DIR }}
      run: safety check --json --output safety-report.json || true

    - name: " Tests with Coverage"
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.BACKEND_DIR }}/coverage.xml
        flags: backend

  # ========================================
  # QUALITY GATE B: Frontend Validation
  # ========================================
  frontend-quality-gate:
    name: " Frontend Quality Gate"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ''18''
        cache: ''npm''
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install frontend dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm ci

    - name: " Code Quality - ESLint"
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run lint

    - name: " Code Quality - Prettier"
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run format:check

    - name: " Type Checking - TypeScript"
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run type-check

    - name: " Unit Tests with Coverage"
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run test:coverage

    - name: " Build Validation"
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run build

    - name: " Bundle Size Check"
      working-directory: ${{ env.FRONTEND_DIR }}
      run: |
        BUNDLE_SIZE=$(du -sh dist | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        # Fail if bundle is larger than 5MB
        if [ $(du -s dist | cut -f1) -gt 5120 ]; then
          echo " Bundle size exceeds 5MB limit"
          exit 1
        fi

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.FRONTEND_DIR }}/coverage/lcov.info
        flags: frontend

  # ========================================
  # QUALITY GATE C: Integration Validation
  # ========================================
  integration-quality-gate:
    name: " Integration Quality Gate"
    runs-on: ubuntu-latest
    needs: [backend-quality-gate, frontend-quality-gate]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ''3.12''

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ''18''
        cache: ''npm''
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install dependencies
      run: |
        # Backend
        cd ${{ env.BACKEND_DIR }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ..
        # Frontend
        cd ${{ env.FRONTEND_DIR }}
        npm ci
        cd ..

    - name: " API Schema Validation"
      run: |
        # Start backend
        cd ${{ env.BACKEND_DIR }}
        python main.py &
        BACKEND_PID=$!
        cd ..
        
        # Wait for backend to start
        sleep 10
        
        # Check API accessibility
        curl -f http://localhost:8000/health || exit 1
        
        # Generate API client and check for drift
        cd ${{ env.FRONTEND_DIR }}
        npm run api:generate
        
        # Check for API drift
        if ! npm run api:check-drift; then
          echo " API drift detected!"
          exit 1
        fi
        
        # Cleanup
        kill $BACKEND_PID

  # ========================================
  # QUALITY GATE SUMMARY
  # ========================================
  quality-gates-summary:
    name: " Quality Gates Summary"
    runs-on: ubuntu-latest
    needs: [backend-quality-gate, frontend-quality-gate, integration-quality-gate]
    if: always()
    steps:
    - name: " Quality Gates Results"
      run: |
        echo " Quality Gates Execution Summary:"
        echo "===================================="
        echo "Backend Quality Gate: ${{ needs.backend-quality-gate.result }}"
        echo "Frontend Quality Gate: ${{ needs.frontend-quality-gate.result }}"
        echo "Integration Quality Gate: ${{ needs.integration-quality-gate.result }}"
        
        if [[ "${{ needs.backend-quality-gate.result }}" != "success" || 
              "${{ needs.frontend-quality-gate.result }}" != "success" || 
              "${{ needs.integration-quality-gate.result }}" != "success" ]]; then
          echo " One or more Quality Gates failed!"
          exit 1
        else
          echo " All Quality Gates passed successfully!"
        fi

  # ========================================
  # DEPLOYMENT (only if all gates pass)
  # ========================================
  deploy:
    name: " Deploy"
    runs-on: ubuntu-latest
    needs: [quality-gates-summary]
    if: github.ref == ''refs/heads/main'' && success()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ''3.12''

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ''18''
        cache: ''npm''
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install dependencies
      run: |
        # Backend
        cd ${{ env.BACKEND_DIR }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ..
        # Frontend
        cd ${{ env.FRONTEND_DIR }}
        npm ci
        cd ..

    - name: Build frontend for production
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run build

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r ${{ env.BACKEND_DIR }} deploy/
        cp -r ${{ env.FRONTEND_DIR }}/dist deploy/frontend
        cp deploy.sh deploy/
        tar -czf deployment.tar.gz deploy/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 30
