# Enhanced Pre-commit Configuration for GLPI Dashboard
# This configuration ensures code quality and security before commits
# Install with: pip install pre-commit && pre-commit install
# Run all hooks: pre-commit run --all-files

repos:
  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        args: [--line-length=127]
        files: ^backend/

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=127]
        files: ^backend/

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=127, --max-complexity=12]
        files: ^backend/
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-security
          - flake8-bandit

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        files: ^backend/.*\.py$
        args: [--ignore-missing-imports, --show-error-codes]
        additional_dependencies: [types-requests, types-redis]

  # Python security
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, backend/, -ll]
        files: ^backend/

  # Secret detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # GitGuardian integration
  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        language: python
        stages: [commit]

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: ^frontend/
      - id: end-of-file-fixer
        exclude: ^frontend/
      - id: check-yaml
      - id: check-json
        exclude: ^frontend/
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-docstring-first
        files: ^backend/
      - id: debug-statements
        files: ^backend/
      - id: name-tests-test
        files: ^backend/tests/

  # Frontend linting and formatting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: ^frontend/src/.*\.(ts|tsx)$
        additional_dependencies:
          - '@typescript-eslint/eslint-plugin@^6.10.0'
          - '@typescript-eslint/parser@^6.10.0'
          - 'eslint-plugin-react-hooks@^4.6.0'
          - 'eslint-plugin-react-refresh@^0.4.4'
        args: [--fix, --ext, .ts,.tsx]

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: ^frontend/src/.*\.(ts|tsx|js|jsx|json|css|md)$
        args: [--write]

  # TypeScript type checking
  - repo: local
    hooks:
      - id: typescript-check
        name: TypeScript type check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$
        pass_filenames: false

  # Python tests
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest
        entry: bash -c 'cd backend && python -m pytest tests/unit/ -x -v'
        language: system
        files: ^backend/
        pass_filenames: false
        stages: [manual]

  # Frontend tests
  - repo: local
    hooks:
      - id: vitest-check
        name: vitest
        entry: bash -c 'cd frontend && npm run test:run'
        language: system
        files: ^frontend/src/
        pass_filenames: false
        stages: [manual]

  # Docker security
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Documentation
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        args: [--wrap=80]
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black

  # Enhanced security and quality checks
  - repo: local
    hooks:
      - id: safety-check
        name: Safety Check (Python Dependencies)
        entry: bash -c 'safety check -r backend/requirements.txt --json'
        language: system
        files: ^backend/requirements\.txt$
        pass_filenames: false

      - id: pip-audit
        name: Pip Audit (Vulnerability Scanner)
        entry: bash -c 'pip-audit -r backend/requirements.txt --format=json'
        language: system
        files: ^backend/requirements\.txt$
        pass_filenames: false

      - id: npm-audit
        name: NPM Security Audit
        entry: bash -c 'cd frontend && npm audit --audit-level=high'
        language: system
        files: ^frontend/package.*\.json$
        pass_filenames: false

      - id: license-check
        name: License Compatibility Check
        entry: bash -c 'pip-licenses --format=json --output-file=licenses.json && echo "License check completed"'
        language: system
        files: ^backend/requirements\.txt$
        pass_filenames: false

      - id: complexity-check
        name: Code Complexity Check
        entry: bash -c 'radon cc backend/ --min=B --show-complexity'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

      - id: test-coverage
        name: Test Coverage Check
        entry: bash -c 'cd backend && python -m pytest --cov=. --cov-fail-under=80 --quiet tests/unit/'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false
        stages: [manual]

      - id: semgrep-security
        name: Semgrep Security Analysis
        entry: bash -c 'semgrep --config=auto --error --quiet .'
        language: system
        files: \.(py|js|jsx|ts|tsx)$
        pass_filenames: false
        stages: [manual]

# Configuration
default_language_version:
  python: python3.11
  node: '18'

default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# CI settings
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Manual execution commands:
# pre-commit run --hook-stage manual pytest-check
# pre-commit run --hook-stage manual vitest-check
# pre-commit run --hook-stage manual test-coverage
# pre-commit run --hook-stage manual semgrep-security
# pre-commit run --all-files  # Run all hooks on all files