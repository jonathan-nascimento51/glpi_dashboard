#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para debugar detalhadamente a classifica√ß√£o de t√©cnicos

Este script ir√°:
1. Simular exatamente o processo de classifica√ß√£o
2. Mostrar cada passo do matching
3. Identificar onde est√° o problema
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from services.glpi_service import GLPIService
import logging

# Configurar logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def debug_level_assignment():
    """Debug detalhado da classifica√ß√£o de t√©cnicos"""
    
    print("=" * 80)
    print("DEBUG DETALHADO DA CLASSIFICA√á√ÉO DE T√âCNICOS")
    print("=" * 80)
    
    # Inicializar servi√ßo GLPI
    glpi_service = GLPIService()
    
    # Mapeamento esperado dos t√©cnicos (exatamente como no c√≥digo)
    expected_mapping = {
        'N1': ['gabriel andrade da conceicao', 'nicolas fernando muniz nunez'],
        'N2': ['alessandro carbonera vieira', 'edson joel dos santos silva', 
               'luciano marcelino da silva', 'jonathan nascimento moletta',
               'leonardo trojan repiso riela', 'thales vinicius paz leite'],
        'N3': ['jorge antonio vicente j√∫nior', 'anderson da silva morim de oliveira',
               'miguelangelo ferreira', 'silvio godinho valim', 'pablo hebling guimaraes'],
        'N4': ['paulo c√©sar ped√≥ nunes', 'luciano de araujo silva', 'wagner mengue',
               'alexandre rovinski almoarqueg', 'gabriel silva machado']
    }
    
    print("\n1. SIMULANDO O PROCESSO DE CLASSIFICA√á√ÉO:")
    
    try:
        # Obter ranking de t√©cnicos
        ranking_data = glpi_service.get_technician_ranking()
        
        if not ranking_data:
            print("   ‚ùå Erro: N√£o foi poss√≠vel obter dados do ranking")
            return
        
        print(f"   ‚úÖ Encontrados {len(ranking_data)} t√©cnicos")
        
        # Simular o processo de classifica√ß√£o para cada t√©cnico
        classification_results = []
        
        for tech in ranking_data:
            name = tech.get('name', 'Nome n√£o encontrado')
            user_id = tech.get('user_id', 'ID n√£o encontrado')
            
            print(f"\n2. PROCESSANDO: {name} (ID: {user_id})")
            
            # Simular a busca por grupos (que sabemos que n√£o vai funcionar)
            print("   2.1. Tentando buscar grupos do usu√°rio...")
            print("        (Sabemos que isso n√£o vai funcionar pois os grupos n√£o est√£o configurados)")
            
            # Simular o fallback por nome
            print("   2.2. Usando fallback por nome:")
            user_name_lower = name.lower()
            print(f"        Nome em lowercase: '{user_name_lower}'")
            
            # Testar cada n√≠vel
            found_level = None
            
            for level, names in expected_mapping.items():
                print(f"        Testando {level}: {names}")
                
                for expected_name in names:
                    if expected_name in user_name_lower:
                        print(f"        ‚úÖ MATCH! '{expected_name}' encontrado em '{user_name_lower}'")
                        found_level = level
                        break
                    else:
                        print(f"        ‚ùå '{expected_name}' N√ÉO encontrado em '{user_name_lower}'")
                
                if found_level:
                    break
            
            if not found_level:
                print("        ‚ö†Ô∏è  Nenhum match encontrado - usando N1 como padr√£o")
                found_level = "N1"
            
            classification_results.append({
                'name': name,
                'user_id': user_id,
                'classified_level': found_level,
                'name_lower': user_name_lower
            })
            
            print(f"        RESULTADO: {name} ‚Üí {found_level}")
        
        print("\n3. RESUMO DA CLASSIFICA√á√ÉO:")
        
        # Agrupar por n√≠vel
        by_level = {'N1': [], 'N2': [], 'N3': [], 'N4': []}
        
        for result in classification_results:
            by_level[result['classified_level']].append(result)
        
        for level in ['N4', 'N3', 'N2', 'N1']:
            techs = by_level[level]
            expected_count = len(expected_mapping[level])
            actual_count = len(techs)
            status = "‚úÖ" if expected_count == actual_count else "‚ùå"
            
            print(f"\n   {level}: {actual_count} t√©cnicos (esperado: {expected_count}) {status}")
            
            for tech in techs:
                print(f"      - {tech['name']}")
        
        print("\n4. AN√ÅLISE DETALHADA DOS PROBLEMAS:")
        
        # Verificar cada nome esperado
        for level, expected_names in expected_mapping.items():
            print(f"\n   {level} - Verificando nomes esperados:")
            
            for expected_name in expected_names:
                found = False
                for result in classification_results:
                    if result['classified_level'] == level and expected_name in result['name_lower']:
                        found = True
                        print(f"      ‚úÖ '{expected_name}' ‚Üí {result['name']}")
                        break
                
                if not found:
                    print(f"      ‚ùå '{expected_name}' N√ÉO ENCONTRADO")
                    
                    # Procurar onde esse nome foi parar
                    for other_level, other_results in by_level.items():
                        if other_level != level:
                            for result in other_results:
                                if expected_name in result['name_lower']:
                                    print(f"         ‚Üí Encontrado em {other_level}: {result['name']}")
                                    break
        
        print("\n5. POSS√çVEIS SOLU√á√ïES:")
        print("   1. Verificar se os nomes est√£o exatamente corretos")
        print("   2. Usar matching mais flex√≠vel (substring parcial)")
        print("   3. Implementar matching por similaridade")
        print("   4. Configurar os grupos corretamente no GLPI")
        
        # Salvar debug detalhado
        with open('debug_level_assignment.txt', 'w', encoding='utf-8') as f:
            f.write("DEBUG DETALHADO DA CLASSIFICA√á√ÉO DE T√âCNICOS\n")
            f.write("=" * 50 + "\n\n")
            
            for result in classification_results:
                f.write(f"Nome: {result['name']}\n")
                f.write(f"Nome lowercase: {result['name_lower']}\n")
                f.write(f"N√≠vel classificado: {result['classified_level']}\n")
                f.write(f"User ID: {result['user_id']}\n")
                f.write("-" * 30 + "\n")
            
            f.write("\nRESUMO POR N√çVEL:\n")
            for level in ['N4', 'N3', 'N2', 'N1']:
                techs = by_level[level]
                f.write(f"{level}: {len(techs)} t√©cnicos\n")
                for tech in techs:
                    f.write(f"  - {tech['name']}\n")
                f.write("\n")
        
        print(f"\n   üìÑ Debug detalhado salvo em: debug_level_assignment.txt")
        
    except Exception as e:
        logger.error(f"Erro durante o debug: {e}")
        print(f"   ‚ùå Erro durante o debug: {e}")

if __name__ == "__main__":
    debug_level_assignment()