#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para debugar por que apenas N2 e N3 aparecem no ranking de t√©cnicos.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.services.glpi_service import GLPIService

def debug_ranking_levels():
    """Debugar n√≠veis no ranking de t√©cnicos"""
    print("üîç Debugando n√≠veis no ranking de t√©cnicos...")
    
    # Inicializar servi√ßo GLPI
    glpi_service = GLPIService()
    
    # Obter ranking completo sem filtros
    print("\nüìä Obtendo ranking completo sem filtros...")
    technicians = glpi_service.get_technician_ranking_with_filters(limit=50)
    
    if not technicians:
        print("‚ùå Erro ao obter ranking")
        return
    print(f"‚úÖ Encontrados {len(technicians)} t√©cnicos no ranking")
    
    # Contar t√©cnicos por n√≠vel
    level_counts = {}
    for tech in technicians:
        level = tech.get('level', 'N/A')
        level_counts[level] = level_counts.get(level, 0) + 1
    
    print("\nüìà Distribui√ß√£o por n√≠veis:")
    for level, count in sorted(level_counts.items()):
        print(f"  {level}: {count} t√©cnicos")
    
    # Mostrar alguns t√©cnicos de cada n√≠vel
    print("\nüë• Exemplos de t√©cnicos por n√≠vel:")
    for level in ['N1', 'N2', 'N3', 'N4']:
        techs_in_level = [t for t in technicians if t.get('level') == level]
        print(f"\n  {level} ({len(techs_in_level)} t√©cnicos):")
        for i, tech in enumerate(techs_in_level[:5]):  # Mostrar apenas os primeiros 5
            print(f"    {i+1}. {tech['name']}: {tech['total']} tickets")
        if len(techs_in_level) > 5:
            print(f"    ... e mais {len(techs_in_level) - 5} t√©cnicos")
    
    # Verificar se h√° t√©cnicos com n√≠vel N/A ou outros
    other_levels = [level for level in level_counts.keys() if level not in ['N1', 'N2', 'N3', 'N4']]
    if other_levels:
        print(f"\n‚ö†Ô∏è  N√≠veis inesperados encontrados: {other_levels}")
        for level in other_levels:
            techs_in_level = [t for t in technicians if t.get('level') == level]
            print(f"  {level}: {[t['name'] for t in techs_in_level[:3]]}")
    
    # Testar determina√ß√£o de n√≠vel para alguns t√©cnicos espec√≠ficos
    print("\nüß™ Testando determina√ß√£o de n√≠vel para t√©cnicos espec√≠ficos:")
    test_names = [
        "Gabriel Concei√ß√£o",
        "Anderson Oliveira", 
        "Wagner Mengue",
        "Silvio Valim",
        "Jonathan Moletta",
        "Thales Leite"
    ]
    
    for name in test_names:
        level = glpi_service._get_technician_level_by_name(name)
        print(f"  {name}: {level}")
    
    print("\n‚úÖ Debug dos n√≠veis no ranking conclu√≠do!")

if __name__ == "__main__":
    debug_ranking_levels()