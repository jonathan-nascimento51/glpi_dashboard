version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379/0
      - GLPI_BASE_URL=${GLPI_BASE_URL}
      - GLPI_APP_TOKEN=${GLPI_APP_TOKEN}
      - GLPI_USER_TOKEN=${GLPI_USER_TOKEN}
    volumes:
      - ./data/lookups:/app/lookups
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - glpi-dashboard

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:5000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - glpi-dashboard

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - glpi-dashboard
    command: redis-server --appendonly yes

  # Worker para tarefas assíncronas
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0
      - GLPI_BASE_URL=${GLPI_BASE_URL}
      - GLPI_APP_TOKEN=${GLPI_APP_TOKEN}
      - GLPI_USER_TOKEN=${GLPI_USER_TOKEN}
    volumes:
      - ./data/lookups:/app/lookups
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - glpi-dashboard

  # Serviço de mapeamento GLPI (execução programada)
  glpi-mapper:
    build:
      context: .
      dockerfile: tools/Dockerfile
    environment:
      - GLPI_BASE_URL=${GLPI_BASE_URL}
      - GLPI_APP_TOKEN=${GLPI_APP_TOKEN}
      - GLPI_USER_TOKEN=${GLPI_USER_TOKEN}
      - MAPPING_OUTPUT_DIR=/app/lookups
      - MAPPING_LOG_LEVEL=INFO
    volumes:
      - ./data/lookups:/app/lookups
      - ./logs:/app/logs
      - ./tools/glpi_mapping/crontab:/etc/cron.d/glpi-mapping
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - glpi-dashboard
    # Executa cron daemon
    command: ["/bin/sh", "-c", "cron && tail -f /var/log/cron.log"]

  # Nginx Reverse Proxy (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - glpi-dashboard
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  lookup_data:
    driver: local

networks:
  glpi-dashboard:
    driver: bridge

# Configuração para desenvolvimento
# Para usar: docker-compose --profile development up
services:
  # Desenvolvimento - Backend com hot reload
  backend-dev:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - REDIS_URL=redis://redis:6379/0
      - GLPI_BASE_URL=${GLPI_BASE_URL}
      - GLPI_APP_TOKEN=${GLPI_APP_TOKEN}
      - GLPI_USER_TOKEN=${GLPI_USER_TOKEN}
    volumes:
      - ./backend:/app/backend
      - ./data/lookups:/app/lookups
      - ./logs:/app/logs
    depends_on:
      - redis
    profiles:
      - development
    networks:
      - glpi-dashboard

  # Desenvolvimento - Frontend com hot reload
  frontend-dev:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      - backend-dev
    profiles:
      - development
    networks:
      - glpi-dashboard