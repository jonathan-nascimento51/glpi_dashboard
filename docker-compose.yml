# GLPI Dashboard - Docker Compose Configuration
# =============================================

version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: glpi_dashboard_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - glpi_network
    environment:
      - REDIS_REPLICATION_MODE=master
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: glpi_dashboard_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app/backend:ro
      - ./scripts:/app/scripts:ro
      - ./tests:/app/tests:ro
      - ./logs:/app/logs
      - backend_cache:/app/.cache
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=True
      - FLASK_APP=backend.app:create_app
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TYPE=redis
      - CACHE_REDIS_URL=redis://redis:6379/1
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - glpi_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: development
    container_name: glpi_dashboard_frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/postcss.config.js:/app/postcss.config.js:ro
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:5000
      - VITE_APP_TITLE=GLPI Dashboard
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - glpi_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: glpi_dashboard_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - glpi_network
    profiles:
      - production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: glpi_dashboard_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - glpi_network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: glpi_dashboard_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    networks:
      - glpi_network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Testing Service
  test-runner:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: testing
    container_name: glpi_dashboard_tests
    volumes:
      - ./backend:/app/backend:ro
      - ./scripts:/app/scripts:ro
      - ./tests:/app/tests:ro
      - ./coverage_html_report:/app/coverage_html_report
      - test_cache:/app/.cache
    environment:
      - FLASK_ENV=testing
      - REDIS_URL=redis://redis:6379/2
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - glpi_network
    profiles:
      - testing
    command: >
      sh -c "
        echo 'Running backend tests...' &&
        python -m pytest tests/ -v --cov=backend --cov=scripts --cov-report=html --cov-report=term-missing &&
        echo 'Tests completed!'
      "

# Networks
networks:
  glpi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
  backend_cache:
    driver: local
  frontend_node_modules:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  test_cache:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml content would go here for development overrides