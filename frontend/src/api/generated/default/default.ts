/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * GLPI Dashboard API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetKpisV1KpisGet200,
  GetNewTicketsV1TicketsNewGet200,
  GetNewTicketsV1TicketsNewGetParams,
  GetSystemStatusV1SystemStatusGet200,
  GetTechnicianRankingV1TechniciansRankingGet200,
  HTTPValidationError
} from '../gLPIDashboardAPI.schemas';

import { customInstance } from '../../http';




/**
 * Endpoint para obter KPIs do dashboard
 * @summary Get Kpis
 */
export const getKpisV1KpisGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetKpisV1KpisGet200>(
      {url: `/v1/kpis`, method: 'GET', signal
    },
      );
    }
  

export const getGetKpisV1KpisGetQueryKey = () => {
    return [`/v1/kpis`] as const;
    }

    
export const getGetKpisV1KpisGetQueryOptions = <TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKpisV1KpisGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKpisV1KpisGet>>> = ({ signal }) => getKpisV1KpisGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetKpisV1KpisGetQueryResult = NonNullable<Awaited<ReturnType<typeof getKpisV1KpisGet>>>
export type GetKpisV1KpisGetQueryError = unknown


export function useGetKpisV1KpisGet<TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKpisV1KpisGet>>,
          TError,
          Awaited<ReturnType<typeof getKpisV1KpisGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetKpisV1KpisGet<TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKpisV1KpisGet>>,
          TError,
          Awaited<ReturnType<typeof getKpisV1KpisGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetKpisV1KpisGet<TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Kpis
 */

export function useGetKpisV1KpisGet<TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetKpisV1KpisGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Endpoint para verificar status do sistema
 * @summary Get System Status
 */
export const getSystemStatusV1SystemStatusGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetSystemStatusV1SystemStatusGet200>(
      {url: `/v1/system/status`, method: 'GET', signal
    },
      );
    }
  

export const getGetSystemStatusV1SystemStatusGetQueryKey = () => {
    return [`/v1/system/status`] as const;
    }

    
export const getGetSystemStatusV1SystemStatusGetQueryOptions = <TData = Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemStatusV1SystemStatusGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>> = ({ signal }) => getSystemStatusV1SystemStatusGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSystemStatusV1SystemStatusGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>>
export type GetSystemStatusV1SystemStatusGetQueryError = unknown


export function useGetSystemStatusV1SystemStatusGet<TData = Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>,
          TError,
          Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSystemStatusV1SystemStatusGet<TData = Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>,
          TError,
          Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSystemStatusV1SystemStatusGet<TData = Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get System Status
 */

export function useGetSystemStatusV1SystemStatusGet<TData = Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatusV1SystemStatusGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSystemStatusV1SystemStatusGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Endpoint para obter ranking de t�cnicos
 * @summary Get Technician Ranking
 */
export const getTechnicianRankingV1TechniciansRankingGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetTechnicianRankingV1TechniciansRankingGet200>(
      {url: `/v1/technicians/ranking`, method: 'GET', signal
    },
      );
    }
  

export const getGetTechnicianRankingV1TechniciansRankingGetQueryKey = () => {
    return [`/v1/technicians/ranking`] as const;
    }

    
export const getGetTechnicianRankingV1TechniciansRankingGetQueryOptions = <TData = Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTechnicianRankingV1TechniciansRankingGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>> = ({ signal }) => getTechnicianRankingV1TechniciansRankingGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTechnicianRankingV1TechniciansRankingGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>>
export type GetTechnicianRankingV1TechniciansRankingGetQueryError = unknown


export function useGetTechnicianRankingV1TechniciansRankingGet<TData = Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>,
          TError,
          Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTechnicianRankingV1TechniciansRankingGet<TData = Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>,
          TError,
          Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTechnicianRankingV1TechniciansRankingGet<TData = Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Technician Ranking
 */

export function useGetTechnicianRankingV1TechniciansRankingGet<TData = Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnicianRankingV1TechniciansRankingGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTechnicianRankingV1TechniciansRankingGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Endpoint para obter novos tickets
 * @summary Get New Tickets
 */
export const getNewTicketsV1TicketsNewGet = (
    params?: GetNewTicketsV1TicketsNewGetParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetNewTicketsV1TicketsNewGet200>(
      {url: `/v1/tickets/new`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNewTicketsV1TicketsNewGetQueryKey = (params?: GetNewTicketsV1TicketsNewGetParams,) => {
    return [`/v1/tickets/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewTicketsV1TicketsNewGetQueryOptions = <TData = Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError = HTTPValidationError>(params?: GetNewTicketsV1TicketsNewGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewTicketsV1TicketsNewGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>> = ({ signal }) => getNewTicketsV1TicketsNewGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNewTicketsV1TicketsNewGetQueryResult = NonNullable<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>>
export type GetNewTicketsV1TicketsNewGetQueryError = HTTPValidationError


export function useGetNewTicketsV1TicketsNewGet<TData = Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError = HTTPValidationError>(
 params: undefined |  GetNewTicketsV1TicketsNewGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>,
          TError,
          Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNewTicketsV1TicketsNewGet<TData = Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError = HTTPValidationError>(
 params?: GetNewTicketsV1TicketsNewGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>,
          TError,
          Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNewTicketsV1TicketsNewGet<TData = Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError = HTTPValidationError>(
 params?: GetNewTicketsV1TicketsNewGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get New Tickets
 */

export function useGetNewTicketsV1TicketsNewGet<TData = Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError = HTTPValidationError>(
 params?: GetNewTicketsV1TicketsNewGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTicketsV1TicketsNewGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNewTicketsV1TicketsNewGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Read Root
 */
export const readRootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getReadRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getReadRootGetQueryOptions = <TData = Awaited<ReturnType<typeof readRootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({ signal }) => readRootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadRootGetQueryResult = NonNullable<Awaited<ReturnType<typeof readRootGet>>>
export type ReadRootGetQueryError = unknown


export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          Awaited<ReturnType<typeof readRootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          Awaited<ReturnType<typeof readRootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Root
 */

export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Health Check
 */
export const healthCheckHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthGet>>> = ({ signal }) => healthCheckHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthGet>>>
export type HealthCheckHealthGetQueryError = unknown


export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



