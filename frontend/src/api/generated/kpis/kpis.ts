/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * GADPI API
 * OpenAPI spec version: 1.1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Kpi
} from '../gadpiApi.schemas';

import { customInstance } from '../../http';




/**
 * @summary Get Kpis
 */
export const getKpisV1KpisGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Kpi[]>(
      {url: `/v1/kpis`, method: 'GET', signal
    },
      );
    }
  

export const getGetKpisV1KpisGetQueryKey = () => {
    return [`/v1/kpis`] as const;
    }

    
export const getGetKpisV1KpisGetQueryOptions = <TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKpisV1KpisGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKpisV1KpisGet>>> = ({ signal }) => getKpisV1KpisGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKpisV1KpisGetQueryResult = NonNullable<Awaited<ReturnType<typeof getKpisV1KpisGet>>>
export type GetKpisV1KpisGetQueryError = unknown


/**
 * @summary Get Kpis
 */

export function useGetKpisV1KpisGet<TData = Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getKpisV1KpisGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetKpisV1KpisGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Kpis V2
 */
export const getKpisV2V2KpisGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Kpi[]>(
      {url: `/v2/kpis`, method: 'GET', signal
    },
      );
    }
  

export const getGetKpisV2V2KpisGetQueryKey = () => {
    return [`/v2/kpis`] as const;
    }

    
export const getGetKpisV2V2KpisGetQueryOptions = <TData = Awaited<ReturnType<typeof getKpisV2V2KpisGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getKpisV2V2KpisGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKpisV2V2KpisGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKpisV2V2KpisGet>>> = ({ signal }) => getKpisV2V2KpisGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKpisV2V2KpisGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKpisV2V2KpisGetQueryResult = NonNullable<Awaited<ReturnType<typeof getKpisV2V2KpisGet>>>
export type GetKpisV2V2KpisGetQueryError = unknown


/**
 * @summary Get Kpis V2
 */

export function useGetKpisV2V2KpisGet<TData = Awaited<ReturnType<typeof getKpisV2V2KpisGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getKpisV2V2KpisGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetKpisV2V2KpisGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



