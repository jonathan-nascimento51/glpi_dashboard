[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
version = "0.1.0"
description = "A dashboard for monitoring GLPI tickets and assets"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Organization", email = "your.email@example.com"}
]
name = "glpi-dashboard"
keywords = ["glpi", "dashboard", "monitoring", "api", "flask"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

dependencies = [
    "email-validator>=2.2.0",
    "flask-cors>=6.0.1",
    "flask>=3.1.1",
    "flask-sqlalchemy>=3.1.1",
    "flask-caching>=2.1.0",
    "gunicorn>=23.0.0",
    "psycopg2-binary>=2.9.10",
    "python-dotenv>=1.0.0",
    "requests>=2.32.4",
    "redis>=5.0.0",
    "hiredis>=2.3.0",
    "schedule>=1.2.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "pydantic>=2.0.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "flake8-bugbear>=23.7.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "coverage>=7.2.0",
    "tox>=4.6.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "coverage>=7.2.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
    "responses>=0.23.0",
    "freezegun>=1.2.0",
]
linting = [
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "flake8-bugbear>=23.7.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/glpi-dashboard"
Repository = "https://github.com/your-org/glpi-dashboard.git"
Documentation = "https://glpi-dashboard.readthedocs.io/"
"Bug Tracker" = "https://github.com/your-org/glpi-dashboard/issues/"
Changelog = "https://github.com/your-org/glpi-dashboard/blob/main/CHANGELOG.md/"

[project.scripts]
glpi-dashboard = "backend.app:main"

[tool.setuptools]
packages = ["backend"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
  | frontend
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/migrations/*",
    "*/node_modules/*",
    "*/frontend/*",
    "*/venv/*",
    "*/env/*",
]
known_first_party = ["backend", "scripts"]
known_third_party = [
    "flask",
    "requests",
    "redis",
    "pytest",
    "dotenv",
    "schedule",
    "dateutil",
    "pytz",
    "pydantic",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "flask_cors.*",
    "redis.*",
    "schedule.*",
    "dateutil.*",
    "pytz.*",
    "pytest.*",
    "responses.*",
    "freezegun.*",
    "factory_boy.*",
    "faker.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["backend", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/node_modules/*",
    "*/frontend/*",
    "setup.py",
    "conftest.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "TYPE_CHECKING",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
precision = 2

[tool.coverage.html]
directory = "coverage_html_report"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "*/tests/*", "*/test_*", "frontend", "node_modules"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args
