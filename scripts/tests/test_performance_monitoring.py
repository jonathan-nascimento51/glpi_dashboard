#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste de performance e monitoramento do ranking de t√©cnicos
Testa tempos de resposta, cache e estabilidade do sistema
"""

import requests
import time
import json
from datetime import datetime
import statistics
import sys
import os

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_response_time(num_requests=5):
    """Testa o tempo de resposta do endpoint"""
    print(f"\n=== TESTE DE PERFORMANCE - {num_requests} requisi√ß√µes ===")
    
    times = []
    successful_requests = 0
    
    for i in range(num_requests):
        try:
            start_time = time.time()
            response = requests.get('http://localhost:5000/api/technicians/ranking')
            end_time = time.time()
            
            response_time = (end_time - start_time) * 1000  # em ms
            times.append(response_time)
            
            if response.status_code == 200:
                successful_requests += 1
                data = response.json()
                print(f"   Requisi√ß√£o {i+1}: {response_time:.0f}ms - {len(data['data'])} t√©cnicos")
            else:
                print(f"   Requisi√ß√£o {i+1}: ERRO {response.status_code} - {response_time:.0f}ms")
                
        except Exception as e:
            print(f"   Requisi√ß√£o {i+1}: FALHA - {e}")
    
    if times:
        print(f"\nüìä Estat√≠sticas de Performance:")
        print(f"   - Tempo m√©dio: {statistics.mean(times):.0f}ms")
        print(f"   - Tempo m√≠nimo: {min(times):.0f}ms")
        print(f"   - Tempo m√°ximo: {max(times):.0f}ms")
        print(f"   - Desvio padr√£o: {statistics.stdev(times) if len(times) > 1 else 0:.0f}ms")
        print(f"   - Taxa de sucesso: {successful_requests}/{num_requests} ({successful_requests/num_requests*100:.1f}%)")
        
        # Avaliar performance
        avg_time = statistics.mean(times)
        if avg_time < 1000:
            print("   ‚úÖ Performance EXCELENTE (< 1s)")
        elif avg_time < 3000:
            print("   ‚úÖ Performance BOA (< 3s)")
        elif avg_time < 5000:
            print("   ‚ö†Ô∏è Performance ACEIT√ÅVEL (< 5s)")
        else:
            print("   ‚ùå Performance RUIM (> 5s)")
    
    return times, successful_requests

def test_cache_behavior():
    """Testa o comportamento do cache"""
    print("\n=== TESTE DE CACHE ===")
    
    # Primeira requisi√ß√£o (cache miss)
    print("   Primeira requisi√ß√£o (cache miss):")
    start_time = time.time()
    response1 = requests.get('http://localhost:5000/api/technicians/ranking')
    time1 = (time.time() - start_time) * 1000
    
    if response1.status_code == 200:
        data1 = response1.json()
        print(f"   ‚úÖ {time1:.0f}ms - {len(data1['data'])} t√©cnicos")
    else:
        print(f"   ‚ùå Erro {response1.status_code}")
        return False
    
    # Segunda requisi√ß√£o imediata (cache hit)
    print("   Segunda requisi√ß√£o (cache hit):")
    start_time = time.time()
    response2 = requests.get('http://localhost:5000/api/technicians/ranking')
    time2 = (time.time() - start_time) * 1000
    
    if response2.status_code == 200:
        data2 = response2.json()
        print(f"   ‚úÖ {time2:.0f}ms - {len(data2['data'])} t√©cnicos")
        
        # Comparar dados
        if data1 == data2:
            print("   ‚úÖ Dados consistentes entre requisi√ß√µes")
        else:
            print("   ‚ùå Dados inconsistentes entre requisi√ß√µes")
        
        # Avaliar melhoria do cache
        if time2 < time1 * 0.8:  # 20% mais r√°pido
            improvement = ((time1 - time2) / time1) * 100
            print(f"   ‚úÖ Cache efetivo - {improvement:.1f}% mais r√°pido")
        else:
            print("   ‚ö†Ô∏è Cache pode n√£o estar funcionando adequadamente")
        
        return True
    else:
        print(f"   ‚ùå Erro {response2.status_code}")
        return False

def test_data_stability(num_tests=3, interval=2):
    """Testa a estabilidade dos dados ao longo do tempo"""
    print(f"\n=== TESTE DE ESTABILIDADE - {num_tests} testes com {interval}s de intervalo ===")
    
    previous_data = None
    stable_count = 0
    
    for i in range(num_tests):
        try:
            response = requests.get('http://localhost:5000/api/technicians/ranking')
            if response.status_code == 200:
                current_data = response.json()['data']
                
                if previous_data is not None:
                    # Comparar IDs e scores dos top 10
                    prev_top10 = [(t['id'], t['score']) for t in previous_data[:10]]
                    curr_top10 = [(t['id'], t['score']) for t in current_data[:10]]
                    
                    if prev_top10 == curr_top10:
                        stable_count += 1
                        print(f"   Teste {i+1}: ‚úÖ Dados est√°veis (top 10 inalterado)")
                    else:
                        print(f"   Teste {i+1}: ‚ö†Ô∏è Dados alterados no top 10")
                        # Mostrar diferen√ßas
                        for j, (prev, curr) in enumerate(zip(prev_top10, curr_top10)):
                            if prev != curr:
                                print(f"      Posi√ß√£o {j+1}: {prev} ‚Üí {curr}")
                else:
                    print(f"   Teste {i+1}: ‚úÖ Dados coletados ({len(current_data)} t√©cnicos)")
                
                previous_data = current_data
                
            else:
                print(f"   Teste {i+1}: ‚ùå Erro {response.status_code}")
        
        except Exception as e:
            print(f"   Teste {i+1}: ‚ùå Falha - {e}")
        
        if i < num_tests - 1:  # N√£o esperar ap√≥s o √∫ltimo teste
            time.sleep(interval)
    
    if num_tests > 1:
        stability_rate = (stable_count / (num_tests - 1)) * 100
        print(f"\n   üìä Taxa de estabilidade: {stability_rate:.1f}%")
        
        if stability_rate >= 90:
            print("   ‚úÖ Sistema MUITO EST√ÅVEL")
        elif stability_rate >= 70:
            print("   ‚úÖ Sistema EST√ÅVEL")
        elif stability_rate >= 50:
            print("   ‚ö†Ô∏è Sistema MODERADAMENTE EST√ÅVEL")
        else:
            print("   ‚ùå Sistema INST√ÅVEL")
    
    return stable_count

def test_concurrent_requests(num_concurrent=5):
    """Testa requisi√ß√µes concorrentes"""
    print(f"\n=== TESTE DE CONCORR√äNCIA - {num_concurrent} requisi√ß√µes simult√¢neas ===")
    
    import threading
    import queue
    
    results = queue.Queue()
    
    def make_request(request_id):
        try:
            start_time = time.time()
            response = requests.get('http://localhost:5000/api/technicians/ranking')
            end_time = time.time()
            
            response_time = (end_time - start_time) * 1000
            
            if response.status_code == 200:
                data = response.json()
                results.put((request_id, 'SUCCESS', response_time, len(data['data'])))
            else:
                results.put((request_id, 'ERROR', response_time, response.status_code))
                
        except Exception as e:
            results.put((request_id, 'FAILURE', 0, str(e)))
    
    # Criar e iniciar threads
    threads = []
    start_time = time.time()
    
    for i in range(num_concurrent):
        thread = threading.Thread(target=make_request, args=(i+1,))
        threads.append(thread)
        thread.start()
    
    # Aguardar conclus√£o
    for thread in threads:
        thread.join()
    
    total_time = (time.time() - start_time) * 1000
    
    # Coletar resultados
    successful = 0
    times = []
    
    while not results.empty():
        req_id, status, resp_time, extra = results.get()
        
        if status == 'SUCCESS':
            successful += 1
            times.append(resp_time)
            print(f"   Requisi√ß√£o {req_id}: ‚úÖ {resp_time:.0f}ms - {extra} t√©cnicos")
        elif status == 'ERROR':
            print(f"   Requisi√ß√£o {req_id}: ‚ùå Erro {extra} - {resp_time:.0f}ms")
        else:
            print(f"   Requisi√ß√£o {req_id}: ‚ùå Falha - {extra}")
    
    print(f"\n   üìä Resultados da concorr√™ncia:")
    print(f"   - Tempo total: {total_time:.0f}ms")
    print(f"   - Taxa de sucesso: {successful}/{num_concurrent} ({successful/num_concurrent*100:.1f}%)")
    
    if times:
        print(f"   - Tempo m√©dio por requisi√ß√£o: {statistics.mean(times):.0f}ms")
        print(f"   - Tempo m√°ximo: {max(times):.0f}ms")
        print(f"   - Tempo m√≠nimo: {min(times):.0f}ms")
    
    if successful == num_concurrent:
        print("   ‚úÖ Sistema suporta bem requisi√ß√µes concorrentes")
    elif successful >= num_concurrent * 0.8:
        print("   ‚ö†Ô∏è Sistema suporta parcialmente requisi√ß√µes concorrentes")
    else:
        print("   ‚ùå Sistema tem problemas com requisi√ß√µes concorrentes")
    
    return successful

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO TESTES DE PERFORMANCE E MONITORAMENTO")
    print(f"‚è∞ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Executar testes
    times, success_rate = test_response_time(5)
    cache_ok = test_cache_behavior()
    stability = test_data_stability(3, 2)
    concurrent_success = test_concurrent_requests(5)
    
    # Resultado final
    print("\n=== RESULTADO FINAL DOS TESTES DE PERFORMANCE ===")
    
    performance_ok = times and statistics.mean(times) < 5000 and success_rate >= 4
    concurrency_ok = concurrent_success >= 4
    
    all_tests_passed = performance_ok and cache_ok and concurrency_ok
    
    if all_tests_passed:
        print("‚úÖ TODOS OS TESTES DE PERFORMANCE PASSARAM!")
    else:
        print("‚ùå ALGUNS TESTES DE PERFORMANCE FALHARAM")
    
    print(f"\nüìã Resumo:")
    print(f"   - Performance: {'‚úÖ' if performance_ok else '‚ùå'}")
    print(f"   - Cache: {'‚úÖ' if cache_ok else '‚ùå'}")
    print(f"   - Concorr√™ncia: {'‚úÖ' if concurrency_ok else '‚ùå'}")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)