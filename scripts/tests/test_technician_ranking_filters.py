#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para verificar se os filtros de data est√£o funcionando corretamente
no ranking de t√©cnicos do GLPI Dashboard.

Este script testa:
1. Ranking sem filtros
2. Ranking com filtros de data
3. Compara√ß√£o dos resultados
4. Valida√ß√£o da estrutura de dados
"""

import requests
import json
from datetime import datetime, timedelta
import sys
import os

# Adicionar o diret√≥rio raiz ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

API_BASE_URL = 'http://localhost:5000/api'

def test_technician_ranking_without_filters():
    """Testa o ranking de t√©cnicos sem filtros"""
    print("\n=== TESTE 1: Ranking sem filtros ===")
    
    try:
        response = requests.get(f'{API_BASE_URL}/technicians/ranking')
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('success'):
                ranking = data.get('data', [])
                print(f"‚úÖ Sucesso: {len(ranking)} t√©cnicos encontrados")
                
                # Mostrar primeiros 3 t√©cnicos
                for i, tech in enumerate(ranking[:3], 1):
                    print(f"  {i}. {tech.get('name', 'N/A')} - {tech.get('total', 0)} tickets - N√≠vel: {tech.get('level', 'N/A')}")
                
                return ranking
            else:
                print(f"‚ùå API retornou erro: {data.get('error', 'Erro desconhecido')}")
                return None
        else:
            print(f"‚ùå Erro HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_technician_ranking_with_date_filters():
    """Testa o ranking de t√©cnicos com filtros de data"""
    print("\n=== TESTE 2: Ranking com filtros de data ===")
    
    # Definir per√≠odo de teste (√∫ltimos 30 dias)
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
    
    print(f"Per√≠odo: {start_date} at√© {end_date}")
    
    try:
        params = {
            'start_date': start_date,
            'end_date': end_date,
            'limit': 10
        }
        
        response = requests.get(f'{API_BASE_URL}/technicians/ranking', params=params)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('success'):
                ranking = data.get('data', [])
                print(f"‚úÖ Sucesso: {len(ranking)} t√©cnicos encontrados com filtros")
                
                # Mostrar primeiros 3 t√©cnicos
                for i, tech in enumerate(ranking[:3], 1):
                    print(f"  {i}. {tech.get('name', 'N/A')} - {tech.get('total', 0)} tickets - N√≠vel: {tech.get('level', 'N/A')}")
                
                return ranking
            else:
                print(f"‚ùå API retornou erro: {data.get('error', 'Erro desconhecido')}")
                return None
        else:
            print(f"‚ùå Erro HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_different_date_ranges():
    """Testa diferentes per√≠odos de data"""
    print("\n=== TESTE 3: Diferentes per√≠odos de data ===")
    
    periods = [
        ('√öltimos 7 dias', 7),
        ('√öltimos 15 dias', 15),
        ('√öltimos 60 dias', 60)
    ]
    
    results = {}
    
    for period_name, days in periods:
        end_date = datetime.now().strftime('%Y-%m-%d')
        start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
        
        print(f"\n--- {period_name} ({start_date} at√© {end_date}) ---")
        
        try:
            params = {
                'start_date': start_date,
                'end_date': end_date,
                'limit': 5
            }
            
            response = requests.get(f'{API_BASE_URL}/technicians/ranking', params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('success'):
                    ranking = data.get('data', [])
                    results[period_name] = ranking
                    
                    print(f"‚úÖ {len(ranking)} t√©cnicos encontrados")
                    
                    if ranking:
                        top_tech = ranking[0]
                        print(f"  Top: {top_tech.get('name', 'N/A')} - {top_tech.get('total', 0)} tickets")
                else:
                    print(f"‚ùå Erro: {data.get('error', 'Erro desconhecido')}")
            else:
                print(f"‚ùå Erro HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    return results

def validate_data_structure(ranking_data):
    """Valida a estrutura dos dados retornados"""
    print("\n=== TESTE 4: Valida√ß√£o da estrutura de dados ===")
    
    if not ranking_data:
        print("‚ùå Nenhum dado para validar")
        return False
    
    required_fields = ['id', 'name', 'total', 'level', 'rank']
    valid = True
    
    for i, tech in enumerate(ranking_data[:3]):
        print(f"\n--- T√©cnico {i+1}: {tech.get('name', 'N/A')} ---")
        
        for field in required_fields:
            if field in tech:
                print(f"  ‚úÖ {field}: {tech[field]}")
            else:
                print(f"  ‚ùå {field}: AUSENTE")
                valid = False
    
    if valid:
        print("\n‚úÖ Estrutura de dados v√°lida")
    else:
        print("\n‚ùå Estrutura de dados inv√°lida")
    
    return valid

def main():
    """Fun√ß√£o principal do teste"""
    print("üß™ TESTE DE FILTROS DE DATA NO RANKING DE T√âCNICOS")
    print("=" * 60)
    
    # Teste 1: Ranking sem filtros
    ranking_without_filters = test_technician_ranking_without_filters()
    
    # Teste 2: Ranking com filtros de data
    ranking_with_filters = test_technician_ranking_with_date_filters()
    
    # Teste 3: Diferentes per√≠odos
    different_periods = test_different_date_ranges()
    
    # Teste 4: Valida√ß√£o da estrutura
    if ranking_with_filters:
        validate_data_structure(ranking_with_filters)
    
    # Resumo dos testes
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    if ranking_without_filters:
        print(f"‚úÖ Ranking sem filtros: {len(ranking_without_filters)} t√©cnicos")
    else:
        print("‚ùå Ranking sem filtros: FALHOU")
    
    if ranking_with_filters:
        print(f"‚úÖ Ranking com filtros: {len(ranking_with_filters)} t√©cnicos")
    else:
        print("‚ùå Ranking com filtros: FALHOU")
    
    print(f"‚úÖ Diferentes per√≠odos testados: {len(different_periods)}")
    
    # Verificar se os filtros fazem diferen√ßa
    if ranking_without_filters and ranking_with_filters:
        if len(ranking_without_filters) != len(ranking_with_filters):
            print("‚úÖ Filtros de data est√£o funcionando (resultados diferentes)")
        else:
            print("‚ö†Ô∏è Filtros podem n√£o estar funcionando (resultados iguais)")
    
    print("\nüéØ Teste conclu√≠do!")

if __name__ == '__main__':
    main()