# ü§ñ Script de Configura√ß√£o Autom√°tica dos MCPs - GLPI Dashboard
# Executa: PowerShell -ExecutionPolicy Bypass -File setup-mcps.ps1

Write-Host "üöÄ Configurando MCPs para Trae AI - GLPI Dashboard" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Gray

# Verificar Node.js
Write-Host "üì¶ Verificando Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n√£o encontrado. Instale em: https://nodejs.org" -ForegroundColor Red
    exit 1
}

# Verificar NPX
Write-Host "üì¶ Verificando NPX..." -ForegroundColor Yellow
try {
    $npxVersion = npx --version
    Write-Host "‚úÖ NPX encontrado: $npxVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå NPX n√£o encontrado. Instale Node.js mais recente." -ForegroundColor Red
    exit 1
}

# Testar MCPs individualmente
Write-Host "`nüß™ Testando MCPs..." -ForegroundColor Yellow

# Array de MCPs para testar
$mcps = @(
    @{name="Context7"; package="@upstash/context7-mcp"},
    @{name="Filesystem"; package="@modelcontextprotocol/server-filesystem"},
    @{name="GitHub"; package="github-mcp-server"},
    @{name="Firecrawl"; package="firecrawl-mcp"},
    @{name="OpenAPI"; package="openapi-mcp-server"},
    @{name="PostgreSQL"; package="mcp-postgres"},
    @{name="Prometheus"; package="prometheus-mcp-server"},
    @{name="Grafana"; package="grafana-mcp"}
)

$successCount = 0
$failedMcps = @()

foreach ($mcp in $mcps) {
    Write-Host "  üîç Testando $($mcp.name)..." -ForegroundColor Cyan
    
    try {
        # Timeout de 30 segundos para cada teste
        $job = Start-Job -ScriptBlock {
            param($package)
            npx -y $package --help 2>&1
        } -ArgumentList $mcp.package
        
        $result = Wait-Job $job -Timeout 30
        $output = Receive-Job $job
        Remove-Job $job -Force
        
        if ($result) {
            Write-Host "    ‚úÖ $($mcp.name) OK" -ForegroundColor Green
            $successCount++
        } else {
            Write-Host "    ‚ö†Ô∏è  $($mcp.name) Timeout" -ForegroundColor Yellow
            $failedMcps += $mcp.name
        }
    } catch {
        Write-Host "    ‚ùå $($mcp.name) Falhou: $($_.Exception.Message)" -ForegroundColor Red
        $failedMcps += $mcp.name
    }
}

Write-Host "`nüìä Resultado dos Testes:" -ForegroundColor Yellow
Write-Host "  ‚úÖ Sucessos: $successCount/$($mcps.Count)" -ForegroundColor Green
if ($failedMcps.Count -gt 0) {
    Write-Host "  ‚ùå Falhas: $($failedMcps -join ', ')" -ForegroundColor Red
}

# Verificar servi√ßos locais
Write-Host "`nüîç Verificando servi√ßos locais..." -ForegroundColor Yellow

# Verificar Backend Flask (GLPI Dashboard)
Write-Host "  üêç Verificando Backend Flask (localhost:5000)..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5000/api/technicians/ranking" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "    ‚úÖ Backend Flask OK (Status: $($response.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "    ‚ö†Ô∏è  Backend Flask n√£o encontrado em localhost:5000" -ForegroundColor Yellow
    Write-Host "    üí° Inicie com: python app.py" -ForegroundColor Gray
}

# Verificar Frontend React (GLPI Dashboard)
Write-Host "  ‚öõÔ∏è  Verificando Frontend React (localhost:3001)..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://127.0.0.1:3001" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "    ‚úÖ Frontend React OK (Status: $($response.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "    ‚ö†Ô∏è  Frontend React n√£o encontrado em localhost:3001" -ForegroundColor Yellow
    Write-Host "    üí° Inicie com: cd frontend && npm run dev" -ForegroundColor Gray
}

# Verificar OpenAPI endpoint (Flask)
Write-Host "  üìã Verificando OpenAPI endpoint..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5000/openapi.json" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "    ‚úÖ OpenAPI endpoint OK" -ForegroundColor Green
} catch {
    Write-Host "    ‚ö†Ô∏è  OpenAPI endpoint n√£o encontrado" -ForegroundColor Yellow
    Write-Host "    üí° Verifique se Flask-RESTX est√° configurado" -ForegroundColor Gray
}

# Verificar banco MySQL (GLPI)
Write-Host "  üóÑÔ∏è  Verificando conex√£o MySQL (porta 3306)..." -ForegroundColor Cyan
try {
    # Teste b√°sico de conectividade na porta
    $tcpClient = New-Object System.Net.Sockets.TcpClient
    $tcpClient.Connect("localhost", 3306)
    $tcpClient.Close()
    Write-Host "    ‚úÖ MySQL: Porta 3306 acess√≠vel" -ForegroundColor Green
} catch {
    Write-Host "    ‚ö†Ô∏è  MySQL: Porta 3306 inacess√≠vel" -ForegroundColor Red
    Write-Host "    üí° Verifique se o MySQL/MariaDB est√° rodando" -ForegroundColor Gray
}

# Verificar Prometheus (opcional)
Write-Host "  üìä Verificando Prometheus (localhost:9090)..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:9090" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "    ‚úÖ Prometheus OK" -ForegroundColor Green
} catch {
    Write-Host "    ‚ö†Ô∏è  Prometheus n√£o encontrado (opcional)" -ForegroundColor Yellow
}

# Verificar Grafana (opcional)
Write-Host "  üìà Verificando Grafana (localhost:3000)..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "    ‚úÖ Grafana OK" -ForegroundColor Green
} catch {
    Write-Host "    ‚ö†Ô∏è  Grafana n√£o encontrado (opcional)" -ForegroundColor Yellow
}

# Gerar relat√≥rio de configura√ß√£o
Write-Host "`nüìã Gerando relat√≥rio de configura√ß√£o..." -ForegroundColor Yellow

$reportPath = "./mcp-setup-report.txt"
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

$report = @"
ü§ñ Relat√≥rio de Configura√ß√£o MCPs - GLPI Dashboard
Gerado em: $timestamp

üì¶ MCPs Testados:
"

foreach ($mcp in $mcps) {
    $status = if ($failedMcps -contains $mcp.name) { "‚ùå FALHOU" } else { "‚úÖ OK" }
    $report += "  $status $($mcp.name) ($($mcp.package))`n"
}

$report += @"

üîß Pr√≥ximos Passos:

1. Configure tokens no arquivo trae-mcp-config.json:
   - GITHUB_TOKEN: Gere em GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens
   - FIRECRAWL_API_KEY: Registre-se em firecrawl.dev
   - GRAFANA_TOKEN: Acesse Grafana ‚Üí Configuration ‚Üí API Keys

2. Ajuste configura√ß√µes do projeto:
   - Verifique credenciais do banco de dados
   - Configure OpenAPI no Flask backend
   - Inicie servi√ßos necess√°rios

3. Cole a configura√ß√£o no Trae AI:
   - V√° em Agents ‚Üí ‚öôÔ∏è AI Management ‚Üí MCP ‚Üí Configure Manually
   - Cole o conte√∫do de trae-mcp-config.json

4. Teste com prompts de exemplo:
   - Consulte mcp-usage-examples.md
   - Inicie sempre com: #Workspace #Folder frontend #Folder backend use context7

üìö Documenta√ß√£o:
   - TRAE_MCP_SETUP.md: Guia completo
   - mcp-usage-examples.md: Prompts pr√°ticos
   - trae-mcp-config.json: Configura√ß√£o para colar no Trae

"@

$report | Out-File -FilePath $reportPath -Encoding UTF8
Write-Host "üìÑ Relat√≥rio salvo em: $reportPath" -ForegroundColor Green

# Resumo final
Write-Host "`nüéØ Resumo Final:" -ForegroundColor Yellow
Write-Host "=" * 40 -ForegroundColor Gray

if ($successCount -eq $mcps.Count) {
    Write-Host "üéâ Todos os MCPs foram testados com sucesso!" -ForegroundColor Green
    Write-Host "üìã Pr√≥ximo passo: Configure tokens e cole a configura√ß√£o no Trae AI" -ForegroundColor Cyan
} elseif ($successCount -gt ($mcps.Count / 2)) {
    Write-Host "‚ö†Ô∏è  Maioria dos MCPs OK, mas alguns falharam" -ForegroundColor Yellow
    Write-Host "üìã Verifique os MCPs que falharam e suas depend√™ncias" -ForegroundColor Cyan
} else {
    Write-Host "‚ùå Muitos MCPs falharam" -ForegroundColor Red
    Write-Host "üìã Verifique sua conex√£o de internet e vers√£o do Node.js" -ForegroundColor Cyan
}

Write-Host "`nüìö Consulte os arquivos de documenta√ß√£o criados:" -ForegroundColor Gray
Write-Host "   - TRAE_MCP_SETUP.md" -ForegroundColor White
Write-Host "   - mcp-usage-examples.md" -ForegroundColor White
Write-Host "   - trae-mcp-config.json" -ForegroundColor White
Write-Host "   - $reportPath" -ForegroundColor White

Write-Host "`n‚ú® Configura√ß√£o conclu√≠da!" -ForegroundColor Green