#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste final para validar que os filtros de data est√£o funcionando corretamente
"""

import json
from datetime import datetime, timedelta
from backend.services.glpi_service import GLPIService

def test_date_filters_validation():
    """Teste final de valida√ß√£o dos filtros de data"""
    
    print("=== VALIDA√á√ÉO FINAL DOS FILTROS DE DATA ===")
    
    # Inicializar servi√ßo GLPI
    glpi = GLPIService()
    
    print("Autenticando...")
    if not glpi._ensure_authenticated():
        print("‚ùå Falha na autentica√ß√£o")
        return False
    
    print("‚úÖ Autenticado com sucesso")
    
    # Descobrir IDs dos campos
    glpi.discover_field_ids()
    print(f"Campo DATE_CREATION descoberto: {glpi.field_ids.get('DATE_CREATION', 'N√£o encontrado')}")
    
    # For√ßar campo 15 para data de cria√ß√£o
    glpi.field_ids["DATE_CREATION"] = "15"
    print(f"Campo DATE_CREATION for√ßado para: {glpi.field_ids['DATE_CREATION']}")
    
    # Obter contagem total sem filtros
    print("\n--- Contagem Base ---")
    total_tickets = glpi.get_ticket_count(89, 1)  # N1, Novo
    print(f"Total de tickets N1/Novo sem filtros: {total_tickets}")
    
    if total_tickets is None or total_tickets == 0:
        print("‚ö†Ô∏è  N√£o h√° tickets para testar ou erro na consulta")
        return False
    
    # Teste 1: Filtro dos √∫ltimos 7 dias
    print("\n--- Teste 1: √öltimos 7 dias ---")
    start_date_7d = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    end_date_7d = datetime.now().strftime('%Y-%m-%d')
    
    count_7d = glpi.get_ticket_count(89, 1, start_date_7d, end_date_7d)
    print(f"Per√≠odo: {start_date_7d} at√© {end_date_7d}")
    print(f"Tickets encontrados: {count_7d}")
    
    if count_7d is not None and count_7d <= total_tickets:
        print("‚úÖ Filtro de 7 dias funcionando (filtrou corretamente)")
    else:
        print("‚ùå Filtro de 7 dias n√£o funcionando")
    
    # Teste 2: Filtro dos √∫ltimos 30 dias
    print("\n--- Teste 2: √öltimos 30 dias ---")
    start_date_30d = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
    end_date_30d = datetime.now().strftime('%Y-%m-%d')
    
    count_30d = glpi.get_ticket_count(89, 1, start_date_30d, end_date_30d)
    print(f"Per√≠odo: {start_date_30d} at√© {end_date_30d}")
    print(f"Tickets encontrados: {count_30d}")
    
    if count_30d is not None and count_30d >= count_7d:
        print("‚úÖ Filtro de 30 dias funcionando (30 dias >= 7 dias)")
    else:
        print("‚ùå Filtro de 30 dias n√£o funcionando")
    
    # Teste 3: Filtro futuro (deve retornar 0)
    print("\n--- Teste 3: Filtro Futuro ---")
    start_date_future = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    end_date_future = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
    
    count_future = glpi.get_ticket_count(89, 1, start_date_future, end_date_future)
    print(f"Per√≠odo: {start_date_future} at√© {end_date_future}")
    print(f"Tickets encontrados: {count_future}")
    
    if count_future is not None and count_future == 0:
        print("‚úÖ Filtro futuro funcionando (retornou 0 como esperado)")
    else:
        print("‚ùå Filtro futuro n√£o funcionando")
    
    # Teste 4: Filtro muito antigo (deve retornar poucos ou 0)
    print("\n--- Teste 4: Filtro Muito Antigo ---")
    start_date_old = "2020-01-01"
    end_date_old = "2020-12-31"
    
    count_old = glpi.get_ticket_count(89, 1, start_date_old, end_date_old)
    print(f"Per√≠odo: {start_date_old} at√© {end_date_old}")
    print(f"Tickets encontrados: {count_old}")
    
    if count_old is not None and count_old < total_tickets:
        print("‚úÖ Filtro antigo funcionando (filtrou corretamente)")
    else:
        print("‚ùå Filtro antigo n√£o funcionando")
    
    # Teste 5: M√©tricas por n√≠vel com filtros
    print("\n--- Teste 5: M√©tricas por N√≠vel com Filtros ---")
    metrics_filtered = glpi._get_metrics_by_level_internal(start_date_7d, end_date_7d)
    
    if metrics_filtered:
        print("‚úÖ M√©tricas filtradas obtidas com sucesso")
        for level, data in metrics_filtered.items():
            total_level = sum(data.values())
            print(f"  {level}: {total_level} tickets (√∫ltimos 7 dias)")
    else:
        print("‚ùå Falha ao obter m√©tricas filtradas")
    
    # Teste 6: M√©tricas gerais com filtros
    print("\n--- Teste 6: M√©tricas Gerais com Filtros ---")
    general_metrics = glpi._get_general_metrics_internal(start_date_7d, end_date_7d)
    
    if general_metrics:
        print("‚úÖ M√©tricas gerais filtradas obtidas com sucesso")
        total_general = sum(general_metrics.values())
        print(f"  Total geral (√∫ltimos 7 dias): {total_general} tickets")
        for status, count in general_metrics.items():
            print(f"  {status}: {count}")
    else:
        print("‚ùå Falha ao obter m√©tricas gerais filtradas")
    
    # Resumo final
    print("\n=== RESUMO FINAL ===")
    tests_passed = 0
    total_tests = 6
    
    if count_7d is not None and count_7d <= total_tickets:
        tests_passed += 1
    if count_30d is not None and count_30d >= count_7d:
        tests_passed += 1
    if count_future is not None and count_future == 0:
        tests_passed += 1
    if count_old is not None and count_old < total_tickets:
        tests_passed += 1
    if metrics_filtered:
        tests_passed += 1
    if general_metrics:
        tests_passed += 1
    
    print(f"Testes aprovados: {tests_passed}/{total_tests}")
    
    if tests_passed >= 5:
        print("üéâ SUCESSO: Filtros de data est√£o funcionando corretamente!")
        return True
    else:
        print("‚ö†Ô∏è  ATEN√á√ÉO: Alguns filtros podem n√£o estar funcionando perfeitamente")
        return False

def test_dashboard_integration():
    """Testa a integra√ß√£o com o dashboard"""
    print("\n=== TESTE DE INTEGRA√á√ÉO COM DASHBOARD ===")
    
    glpi = GLPIService()
    
    if not glpi._ensure_authenticated():
        print("‚ùå Falha na autentica√ß√£o")
        return False
    
    # Testar m√©tricas do dashboard com filtros
    try:
        # Simular chamada do dashboard com filtros
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"Testando m√©tricas do dashboard para per√≠odo: {start_date} at√© {end_date}")
        
        # Obter m√©tricas por n√≠vel
        metrics_by_level = glpi._get_metrics_by_level_internal(start_date, end_date)
        
        # Obter m√©tricas gerais
        general_metrics = glpi._get_general_metrics_internal(start_date, end_date)
        
        if metrics_by_level and general_metrics:
            print("‚úÖ Integra√ß√£o com dashboard funcionando")
            print("Dados dispon√≠veis para o frontend:")
            print(f"  - M√©tricas por n√≠vel: {len(metrics_by_level)} n√≠veis")
            print(f"  - M√©tricas gerais: {len(general_metrics)} status")
            return True
        else:
            print("‚ùå Falha na integra√ß√£o com dashboard")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o: {str(e)}")
        return False

if __name__ == "__main__":
    # Executar valida√ß√£o dos filtros
    filters_ok = test_date_filters_validation()
    
    # Executar teste de integra√ß√£o
    integration_ok = test_dashboard_integration()
    
    print("\n" + "="*50)
    if filters_ok and integration_ok:
        print("üéâ VALIDA√á√ÉO COMPLETA: Sistema funcionando corretamente!")
        print("‚úÖ Filtros de data implementados e validados")
        print("‚úÖ Integra√ß√£o com dashboard funcionando")
    else:
        print("‚ö†Ô∏è  VALIDA√á√ÉO PARCIAL: Alguns problemas identificados")
        if not filters_ok:
            print("‚ùå Problemas nos filtros de data")
        if not integration_ok:
            print("‚ùå Problemas na integra√ß√£o com dashboard")