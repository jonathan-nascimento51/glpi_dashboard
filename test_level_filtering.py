#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste de filtragem por n√≠vel espec√≠fico
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.services.glpi_service import GLPIService

def test_level_filtering():
    """Testa a filtragem por n√≠vel espec√≠fico"""
    print("üöÄ Iniciando teste de filtragem por n√≠vel...")
    
    service = GLPIService()
    
    # Testar cada n√≠vel individualmente
    levels = ['N1', 'N2', 'N3', 'N4']
    
    for level in levels:
        print(f"\nüìä Testando filtro para n√≠vel {level}...")
        
        try:
            ranking = service.get_technician_ranking_with_filters(
                limit=5,
                level=level
            )
            
            if ranking and 'technicians' in ranking:
                techs = ranking['technicians']
                print(f"‚úÖ Encontrados {len(techs)} t√©cnicos {level}:")
                
                for i, tech in enumerate(techs, 1):
                    tech_level = tech.get('level', 'N/A')
                    print(f"  {i}. {tech['name']}: {tech['ticket_count']} tickets, N√≠vel: {tech_level}")
                    
                    # Verificar se todos os t√©cnicos retornados s√£o do n√≠vel correto
                    if tech_level != level:
                        print(f"‚ùå ERRO: T√©cnico {tech['name']} tem n√≠vel {tech_level}, mas deveria ser {level}")
                        return False
                        
                print(f"‚úÖ Todos os t√©cnicos retornados s√£o {level}")
            else:
                print(f"‚ÑπÔ∏è Nenhum t√©cnico {level} encontrado")
                
        except Exception as e:
            print(f"‚ùå Erro ao testar n√≠vel {level}: {e}")
            return False
    
    print("\n‚úÖ Teste de filtragem por n√≠vel conclu√≠do com sucesso!")
    return True

if __name__ == "__main__":
    test_level_filtering()