#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
from datetime import datetime

def validate_technician_ranking_fix():
    """Valida a corre√ß√£o do ranking de t√©cnicos"""
    
    print("üîç VALIDA√á√ÉO DA CORRE√á√ÉO DO RANKING DE T√âCNICOS")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    try:
        # Buscar dados do endpoint
        response = requests.get('http://localhost:5000/api/technicians/ranking')
        if not response.ok:
            print(f"‚ùå Erro ao acessar endpoint: {response.status_code}")
            return
        
        data = response.json()
        technicians = data.get('data', [])
        
        print(f"üìä RESULTADO DA CORRE√á√ÉO:")
        print(f"   ‚Ä¢ Total de t√©cnicos no ranking: {len(technicians)}")
        print(f"   ‚Ä¢ Antes da corre√ß√£o: 27 t√©cnicos (incluindo 9 servidores administrativos)")
        print(f"   ‚Ä¢ Ap√≥s a corre√ß√£o: {len(technicians)} t√©cnicos (apenas t√©cnicos da DTIC)")
        print(f"   ‚Ä¢ Usu√°rios removidos: {27 - len(technicians)}")
        print()
        
        print("‚úÖ T√âCNICOS V√ÅLIDOS NO RANKING:")
        print("-" * 60)
        
        total_tickets_all = 0
        min_tickets = float('inf')
        max_tickets = 0
        
        for i, tech in enumerate(technicians, 1):
            total_tickets = tech['tickets_abertos'] + tech['tickets_fechados']
            total_tickets_all += total_tickets
            min_tickets = min(min_tickets, total_tickets)
            max_tickets = max(max_tickets, total_tickets)
            
            print(f"{i:2d}. {tech['name']} (ID: {tech['id']})")
            print(f"    Score: {tech['score']} | Abertos: {tech['tickets_abertos']} | Fechados: {tech['tickets_fechados']} | Total: {total_tickets}")
            print()
        
        avg_tickets = total_tickets_all / len(technicians) if technicians else 0
        
        print("üìà ESTAT√çSTICAS DOS T√âCNICOS V√ÅLIDOS:")
        print("-" * 60)
        print(f"   ‚Ä¢ M√≠nimo de tickets: {min_tickets}")
        print(f"   ‚Ä¢ M√°ximo de tickets: {max_tickets}")
        print(f"   ‚Ä¢ M√©dia de tickets: {avg_tickets:.1f}")
        print(f"   ‚Ä¢ Total de tickets: {total_tickets_all}")
        print()
        
        print("üéØ CRIT√âRIO DE FILTRO APLICADO:")
        print("-" * 60)
        print("   ‚Ä¢ Usu√°rios ativos (is_active = 1)")
        print("   ‚Ä¢ Usu√°rios n√£o deletados (is_deleted = 0)")
        print("   ‚Ä¢ M√≠nimo de 10 tickets atribu√≠dos")
        print("   ‚Ä¢ Isso exclui servidores administrativos que ocasionalmente recebem tickets")
        print()
        
        print("üö´ USU√ÅRIOS REMOVIDOS (que estavam nas posi√ß√µes 17, 19-27):")
        print("-" * 60)
        removed_users = [
            "Luciana G. (posi√ß√£o 17)",
            "Dorinha J. (posi√ß√£o 19)", 
            "E outros 7 servidores administrativos (posi√ß√µes 20-27)"
        ]
        
        for user in removed_users:
            print(f"   ‚Ä¢ {user} - Removido por ter menos de 10 tickets")
        print()
        
        print("‚úÖ VALIDA√á√ÉO DE QUALIDADE:")
        print("-" * 60)
        
        # Verificar se todos t√™m pelo menos 10 tickets
        all_valid = all(tech['tickets_abertos'] + tech['tickets_fechados'] >= 10 for tech in technicians)
        print(f"   ‚Ä¢ Todos os t√©cnicos t√™m >= 10 tickets: {'‚úÖ SIM' if all_valid else '‚ùå N√ÉO'}")
        
        # Verificar se est√° ordenado por score
        is_sorted = all(technicians[i]['score'] >= technicians[i+1]['score'] for i in range(len(technicians)-1))
        print(f"   ‚Ä¢ Ranking ordenado por score: {'‚úÖ SIM' if is_sorted else '‚ùå N√ÉO'}")
        
        # Verificar se n√£o h√° duplicatas
        ids = [tech['id'] for tech in technicians]
        no_duplicates = len(ids) == len(set(ids))
        print(f"   ‚Ä¢ Sem t√©cnicos duplicados: {'‚úÖ SIM' if no_duplicates else '‚ùå N√ÉO'}")
        
        print()
        print("üéâ RESUMO DA CORRE√á√ÉO:")
        print("=" * 60)
        print("‚úÖ PROBLEMA ORIGINAL: Ranking mostrava 27 t√©cnicos, incluindo 9 servidores")
        print("   administrativos que n√£o s√£o t√©cnicos da DTIC")
        print()
        print("üîß SOLU√á√ÉO IMPLEMENTADA: Modifica√ß√£o da fun√ß√£o _is_dtic_technician()")
        print("   em backend/services/glpi_service.py para filtrar por volume de tickets")
        print()
        print(f"‚úÖ RESULTADO: Ranking agora mostra {len(technicians)} t√©cnicos leg√≠timos da DTIC")
        print("   Todos com pelo menos 10 tickets atribu√≠dos")
        print()
        print("üéØ CRIT√âRIO DE SUCESSO: Apenas t√©cnicos reais da DTIC no ranking")
        print("   Status: ‚úÖ ALCAN√áADO")
        print()
        
        if all_valid and is_sorted and no_duplicates:
            print("üèÜ VALIDA√á√ÉO FINAL: ‚úÖ SUCESSO COMPLETO")
            print("   O ranking de t√©cnicos est√° funcionando corretamente!")
        else:
            print("‚ö†Ô∏è  VALIDA√á√ÉO FINAL: Alguns problemas detectados")
        
    except Exception as e:
        print(f"‚ùå Erro durante valida√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    validate_technician_ranking_fix()